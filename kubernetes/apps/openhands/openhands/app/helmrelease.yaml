---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: openhands
spec:
  interval: 15m
  timeout: 10m
  chart:
    spec:
      chart: openhands
      version: 0.1.1
      sourceRef:
        kind: HelmRepository
        name: openhands
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  releaseName: openhands
  # No postRenderers needed - using native runtime-api instead of DinD
  values:
    # Override image tags to match 0.47.0 release (PR #71)
    image:
      repository: ghcr.io/all-hands-ai/deploy
      tag: "0.55.1"

    runtime:
      image:
        repository: ghcr.io/all-hands-ai/runtime
        tag: "3c39b93f7e151f88e7b4274b80aafa604fcae092-nikolaik"

    # Enable runtime-api for native Kubernetes runtime support
    runtime-api:
      enabled: true
      image:
        tag: "sha-77dd418"

      postgresql:
        auth:
          existingSecret: postgres-password

      migrationJob:
        enabled: true

      env:
        # Enable in-cluster Kubernetes authentication (perfect for Talos)
        RUNTIME_IN_SAME_CLUSTER: "true"
        K8S_NAMESPACE: "openhands"

        # Configure for Talos infrastructure
        INGRESS_CLASS: "cilium"
        RUNTIME_BASE_URL: "runtime-api.openhands.sevendays.cloud"
        STORAGE_CLASS: "longhorn"
        PERSISTENT_STORAGE_SIZE: "10Gi"

        # Resource configuration
        MEMORY_REQUEST: "2048Mi"
        CPU_REQUEST: "1000m"
        RUNTIME_CLASS: "gvisor"  # Use gvisor runtime class for containerd

                # Session and cleanup configuration
        SESSION_TIMEOUT: "3600"  # 1 hour session timeout
        POD_CLEANUP_TIMEOUT: "300"  # 5 minutes cleanup timeout

        # Database configuration (runtime-api needs its own database)
        DB_HOST: "openhands-postgresql"
        DB_NAME: "runtime_api_db"  # Separate database for runtime-api
        DB_USER: "postgres"

        # Do NOT set cloud provider variables for Talos
        # GCP_PROJECT: ""    # Leave unset
        # AWS_REGION: ""     # Leave unset
        # GCP_REGION: ""     # Leave unset
        # ARTIFACT_REGISTRY_LOCATION: ""  # Leave unset
        # ARTIFACT_REGISTRY_REPOSITORY: ""  # Leave unset

      ingress:
        enabled: true
        host: "runtime-api.openhands.sevendays.cloud"
        className: "cilium"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"

      warmRuntimes:
        enabled: true
        count: 1
        configs:
          - name: default
            image: "ghcr.io/all-hands-ai/runtime:3c39b93f7e151f88e7b4274b80aafa604fcae092-nikolaik"
            working_dir: "/openhands/code/"
            environment:
              # Pass LLM configuration to runtime containers
              LLM_BASE_URL: "http://openhands-litellm.openhands.svc.cluster.local:4000"
              LITELLM_BASE_URL: "http://openhands-litellm.openhands.svc.cluster.local:4000"
            plugins:
              - agent_skills
              - jupyter
              - vscode  # VS Code support built-in!
            command:
              - /openhands/micromamba/bin/micromamba
              - run
              - -n
              - openhands
              - poetry
              - run
              - python
              - -u
              - -m
              - openhands.runtime.action_execution_server
              - "60000"
              - --working-dir
              - /workspace
              - --plugins
              - agent_skills
              - jupyter
              - vscode
              - --username
              - root
              - --user-id
              - "0"

    # The chart provides an Ingress resource but this cluster exposes
    # services via Gateway API HTTPRoutes.  We therefore disable the
    # built-in Ingress and create a separate HTTPRoute manifest (see
    # ../gateway/route.yaml.j2) that forwards external traffic.
    ingress:
      enabled: false
      host: "${SECRET_DOMAIN}"

    # Override sandbox configuration to prevent dummy URL
    sandbox:
      apiHostname: "https://runtime-api.openhands.sevendays.cloud"

    env:
      # Database configuration
      DB_HOST: "openhands-postgresql"
      DB_NAME: "openhands"
      DB_USER: "postgres"

      # Authentication configuration
      KEYCLOAK_SERVER_URL_EXT: "https://auth.openhands.${SECRET_DOMAIN}"
      AUTH_WEB_HOST: "auth.openhands.${SECRET_DOMAIN}"  # Override chart default "keycloak"

      # Runtime configuration - use remote runtime-api
      # RUNTIME: Chart hardcodes this to "remote" - no need to duplicate
      SANDBOX_REMOTE_RUNTIME_API_TIMEOUT: "180"

      # MCP configuration
      MCP_HOST: "mcp-proxy.${SECRET_DOMAIN}"  # Override chart default "${SECRET_DOMAIN}"

      # Storage configuration
      STORAGE_CLASS: "longhorn"

      # LLM configuration
      LITELLM_DEFAULT_MODEL: "litellm_proxy/openai/ubergarm/DeepSeek-R1-0528-IQ3_K_R4"
      LLM_MAX_INPUT_TOKENS: "131072"
      LLM_BASE_URL: "http://openhands-litellm.openhands.svc.cluster.local:4000"
      LITELLM_BASE_URL: "http://openhands-litellm.openhands.svc.cluster.local:4000"
      SANDBOX_LLM_BASE_URL: "http://openhands-litellm.openhands.svc.cluster.local:4000"
      RUNTIME_LLM_BASE_URL: "http://openhands-litellm.openhands.svc.cluster.local:4000"

    tls:
      enabled: true

    postgresql:
      enabled: false

    keycloak:
      enabled: true
      url: "http://keycloak"  # Use internal service URL for job connectivity
      externalDatabase:
        host: "openhands-postgresql"
        port: 5432
        database: "openhands"
        existingSecret: "postgres-password"
      resources:
        requests:
          cpu: "250m"
          memory: "1.5Gi"
        limits:
          cpu: "1500m"
          memory: "3Gi"
      ingress:
        enabled: false
        host: "auth.${SECRET_DOMAIN}"
        annotations: {}
      proxy: "edge"  # Trust X-Forwarded headers from reverse proxy
      hostname: "auth.openhands.${SECRET_DOMAIN}"
      hostnameStrict: false
      tls:
        enabled: true  # Sets KEYCLOAK_ENABLE_HTTPS: "true" to fix mixed content
        autoGenerated: true  # Let Bitnami chart generate certificates
      extraEnvVars:
        - name: KC_PROXY
          value: "edge"
        - name: KEYCLOAK_PROXY_ADDRESS_FORWARDING
          value: "true"
      limits:
        Cpu: 1500m
        Memory: 2Gi
      Requests:
        Cpu: 250m
        Memory: 1Gi

    redis:
      enabled: true

    litellm:
      enabled: true
      url: "http://openhands-litellm.openhands.svc.cluster.local:4000"
      # Injected from SOPS-encrypted secret rendered from templates
      teamId: "${LITELLM_TEAM_ID}"
      hosts:
        - host: "openhands-litellm.openhands.svc.cluster.local"
          paths:
          - path: /
            pathType: Prefix
      tls:
        - secretName: llm-proxy-tls
          hosts:
          - "openhands-litellm.openhands.svc.cluster.local"

    litellm-helm:
      fullnameOverride: "openhands-litellm"
      enabled: true
      masterkeySecretName: lite-llm-api-key
      masterkeySecretKey: lite-llm-api-key
      ingress:
        hosts:
        - host: openhands-litellm.openhands.svc.cluster.local
          paths:
          - path: /
            pathType: Prefix
        tls:
        - secretName: llm-proxy-tls
          hosts:
          - openhands-litellm.openhands.svc.cluster.local
      env:
        UI_USERNAME: "admin"
        UI_PASSWORD: "ZZbOHfyJ7o5GFPrcOtV8khqNTbMrhoNm"
      proxy_config:
        model_list:
          - model_name: "litellm_proxy/${LITELLM_MODEL}"
            litellm_params:
              model: "${LITELLM_MODEL}"
              api_base: "${LITELLM_BASE_URL}"
              api_key: "${LITELLM_API_KEY}"
              timeout: 3600
              max_tokens: 20000
              context_window: 131072
      db:
        deployStandalone: false
        useExisting: true
        database: litellm
        endpoint: openhands-postgresql
        secret:
          name: postgres-password
      migrationJob:
        enabled: false

    podAnnotations:
      reloader.stakater.com/auto: "true"

    fullnameOverride: openhands-app

    monitoring:
      enabled: false

    appConfig:
      OPENHANDS_CONFIG_CLS: "server.config.SaaSServerConfig"
      OPENHANDS_CONVERSATION_VALIDATOR_CLS: "storage.saas_conversation_validator.SaasConversationValidator"

